//
//  DependencyDebug.swift
//  FigrClub
//
//  Created by Emerson Balahan Varona on 7/7/25.
//

import Foundation

/*
 #if DEBUG
 /// Herramienta de diagn√≥stico para verificar la configuraci√≥n de dependencias
 final class DependencyDebug {
 
 static func verifyAllDependencies() {
 print("üîç [DependencyDebug] Verificando dependencias...")
 
 // Verificar dependencias cr√≠ticas
 verifyCoreDependencies()
 verifyAuthDependencies()
 verifyViewModelDependencies()
 
 print("‚úÖ [DependencyDebug] Verificaci√≥n completada")
 }
 
 private static func verifyCoreDependencies() {
 print("üì¶ [DependencyDebug] Verificando dependencias core...")
 
 // Verificar APIServiceProtocol (UNIFICADO)
 if DependencyInjector.shared.resolveOptional(APIServiceProtocol.self) != nil {
 print("‚úÖ APIServiceProtocol - OK")
 } else {
 print("‚ùå APIServiceProtocol - FALTANTE")
 }
 
 // Verificar NetworkDispatcherProtocol (ALIAS)
 if DependencyInjector.shared.resolveOptional(NetworkDispatcherProtocol.self) != nil {
 print("‚úÖ NetworkDispatcherProtocol (alias) - OK")
 } else {
 print("‚ùå NetworkDispatcherProtocol (alias) - FALTANTE")
 }
 
 // Verificar TokenManager
 if DependencyInjector.shared.resolveOptional(TokenManager.self) != nil {
 print("‚úÖ TokenManager - OK")
 } else {
 print("‚ùå TokenManager - FALTANTE")
 }
 
 // Verificar SecureStorageProtocol
 if DependencyInjector.shared.resolveOptional(SecureStorageProtocol.self) != nil {
 print("‚úÖ SecureStorageProtocol - OK")
 } else {
 print("‚ùå SecureStorageProtocol - FALTANTE")
 }
 
 // Verificar UserDefaultsManagerProtocol
 if DependencyInjector.shared.resolveOptional(UserDefaultsManagerProtocol.self) != nil {
 print("‚úÖ UserDefaultsManagerProtocol - OK")
 } else {
 print("‚ùå UserDefaultsManagerProtocol - FALTANTE")
 }
 }
 
 private static func verifyAuthDependencies() {
 print("üîê [DependencyDebug] Verificando dependencias de autenticaci√≥n...")
 
 // Verificar ValidationServiceProtocol
 if DependencyInjector.shared.resolveOptional(ValidationServiceProtocol.self) != nil {
 print("‚úÖ ValidationServiceProtocol - OK")
 } else {
 print("‚ùå ValidationServiceProtocol - FALTANTE")
 }
 
 // Verificar AuthServiceProtocol
 if DependencyInjector.shared.resolveOptional(AuthServiceProtocol.self) != nil {
 print("‚úÖ AuthServiceProtocol - OK")
 } else {
 print("‚ùå AuthServiceProtocol - FALTANTE")
 }
 
 // Verificar AuthRepositoryProtocol
 if DependencyInjector.shared.resolveOptional(AuthRepositoryProtocol.self) != nil {
 print("‚úÖ AuthRepositoryProtocol - OK")
 } else {
 print("‚ùå AuthRepositoryProtocol - FALTANTE")
 }
 
 // Verificar AuthStateManager (ACTUALIZADO: AuthManager -> AuthStateManager)
 if DependencyInjector.shared.resolveOptional(AuthStateManager.self) != nil {
 print("‚úÖ AuthStateManager - OK")
 } else {
 print("‚ùå AuthStateManager - FALTANTE")
 }
 }
 
 private static func verifyViewModelDependencies() {
 print("üé≠ [DependencyDebug] Verificando ViewModels...")
 
 // Verificar AuthViewModel
 if DependencyInjector.shared.resolveOptional(AuthViewModel.self) != nil {
 print("‚úÖ AuthViewModel - OK")
 } else {
 print("‚ùå AuthViewModel - FALTANTE")
 }
 }
 
 // MARK: - M√©todos de verificaci√≥n espec√≠ficos
 
 /// Verifica que todas las dependencias de autenticaci√≥n est√©n correctamente conectadas
 static func verifyAuthFlow() {
 print("üîê [DependencyDebug] Verificando flujo de autenticaci√≥n completo...")
 
 // Verificar que podemos crear el flujo completo
 if let authStateManager = DependencyInjector.shared.resolveOptional(AuthStateManager.self),
 let authViewModel = DependencyInjector.shared.resolveOptional(AuthViewModel.self) {
 
 print("‚úÖ Flujo de autenticaci√≥n verificado correctamente")
 print("   - AuthStateManager: \(type(of: authStateManager))")
 print("   - AuthViewModel: \(type(of: authViewModel))")
 
 } else {
 print("‚ùå Error en flujo de autenticaci√≥n: No se pudieron resolver las dependencias")
 }
 }
 
 /// Verifica que todas las dependencias de red est√©n funcionando
 static func verifyNetworkStack() {
 print("üåê [DependencyDebug] Verificando stack de red...")
 
 if let tokenManager = DependencyInjector.shared.resolveOptional(TokenManager.self),
 let networkDispatcher = DependencyInjector.shared.resolveOptional(NetworkDispatcherProtocol.self),
 let authService = DependencyInjector.shared.resolveOptional(AuthServiceProtocol.self),
 let secureStorage = DependencyInjector.shared.resolveOptional(SecureStorageProtocol.self) {
 
 print("‚úÖ Stack de red verificado correctamente")
 print("   - TokenManager: \(type(of: tokenManager))")
 print("   - NetworkDispatcher: \(type(of: networkDispatcher))")
 print("   - AuthService: \(type(of: authService))")
 print("   - SecureStorage: \(type(of: secureStorage))")
 
 } else {
 print("‚ùå Error en stack de red: No se pudieron resolver todas las dependencias")
 }
 }
 
 /// Verifica la configuraci√≥n completa del contenedor
 static func verifyContainerHealth() {
 print("üè• [DependencyDebug] Verificando salud del contenedor...")
 
 // Definir tipos de dependencias a verificar
 let dependencyChecks: [(name: String, check: () -> Bool)] = [
 // Core
 ("TokenManager", { DependencyInjector.shared.resolveOptional(TokenManager.self) != nil }),
 ("APIServiceProtocol", { DependencyInjector.shared.resolveOptional(APIServiceProtocol.self) != nil }),
 ("NetworkDispatcherProtocol", { DependencyInjector.shared.resolveOptional(NetworkDispatcherProtocol.self) != nil }),
 ("SecureStorageProtocol", { DependencyInjector.shared.resolveOptional(SecureStorageProtocol.self) != nil }),
 ("UserDefaultsManagerProtocol", { DependencyInjector.shared.resolveOptional(UserDefaultsManagerProtocol.self) != nil }),
 
 // Services
 ("AuthServiceProtocol", { DependencyInjector.shared.resolveOptional(AuthServiceProtocol.self) != nil }),
 ("ValidationServiceProtocol", { DependencyInjector.shared.resolveOptional(ValidationServiceProtocol.self) != nil }),
 
 // Repositories
 ("AuthRepositoryProtocol", { DependencyInjector.shared.resolveOptional(AuthRepositoryProtocol.self) != nil }),
 
 // State Management
 ("AuthStateManager", { DependencyInjector.shared.resolveOptional(AuthStateManager.self) != nil }),
 
 // ViewModels
 ("AuthViewModel", { DependencyInjector.shared.resolveOptional(AuthViewModel.self) != nil })
 ]
 
 var resolvedCount = 0
 var failedDependencies: [String] = []
 
 for dependency in dependencyChecks {
 if dependency.check() {
 resolvedCount += 1
 } else {
 failedDependencies.append(dependency.name)
 }
 }
 
 let totalCount = dependencyChecks.count
 let healthPercentage = (Double(resolvedCount) / Double(totalCount)) * 100
 
 print("üìä Salud del contenedor: \(String(format: "%.1f", healthPercentage))% (\(resolvedCount)/\(totalCount))")
 
 if !failedDependencies.isEmpty {
 print("‚ùå Dependencias fallidas:")
 for dependency in failedDependencies {
 print("   - \(dependency)")
 }
 }
 
 if healthPercentage == 100 {
 print("üéâ ¬°Contenedor completamente saludable!")
 } else if healthPercentage >= 80 {
 print("‚ö†Ô∏è Contenedor mayormente funcional con algunos problemas")
 } else {
 print("üö® Contenedor con problemas cr√≠ticos")
 }
 }
 }
 
 #endif
 */

#if DEBUG
/// Herramienta de diagn√≥stico para verificar la configuraci√≥n de dependencias
final class DependencyDebug {
    
    // MARK: - Public Methods
    
    static func verifyAllDependencies() {
        print("üîç [DependencyDebug] Verificando dependencias...")
        
        // Verificar dependencias cr√≠ticas
        verifyCoreDependencies()
        verifyAuthDependencies()
        verifyViewModelDependencies()
        verifyNetworkArchitecture()
        
        print("‚úÖ [DependencyDebug] Verificaci√≥n completada")
    }
    
    // MARK: - Private Verification Methods
    
    private static func verifyCoreDependencies() {
        print("üì¶ [DependencyDebug] Verificando dependencias core...")
        
        // Verificar NetworkDispatcherProtocol (Interface principal)
        if DependencyInjector.shared.resolveOptional(NetworkDispatcherProtocol.self) != nil {
            print("‚úÖ NetworkDispatcherProtocol - OK")
        } else {
            print("‚ùå NetworkDispatcherProtocol - FALTANTE")
        }
        
        // Verificar TokenManager
        if DependencyInjector.shared.resolveOptional(TokenManager.self) != nil {
            print("‚úÖ TokenManager - OK")
        } else {
            print("‚ùå TokenManager - FALTANTE")
        }
        
        // Verificar SecureStorageProtocol
        if DependencyInjector.shared.resolveOptional(SecureStorageProtocol.self) != nil {
            print("‚úÖ SecureStorageProtocol - OK")
        } else {
            print("‚ùå SecureStorageProtocol - FALTANTE")
        }
        
        // Verificar UserDefaultsManagerProtocol
        if DependencyInjector.shared.resolveOptional(UserDefaultsManagerProtocol.self) != nil {
            print("‚úÖ UserDefaultsManagerProtocol - OK")
        } else {
            print("‚ùå UserDefaultsManagerProtocol - FALTANTE")
        }
        
        // Verificar NetworkLoggerProtocol
        if DependencyInjector.shared.resolveOptional(NetworkLoggerProtocol.self) != nil {
            print("‚úÖ NetworkLoggerProtocol - OK")
        } else {
            print("‚ùå NetworkLoggerProtocol - FALTANTE")
        }
        
        // Verificar APIConfigurationProtocol
        if DependencyInjector.shared.resolveOptional(APIConfigurationProtocol.self) != nil {
            print("‚úÖ APIConfigurationProtocol - OK")
        } else {
            print("‚ùå APIConfigurationProtocol - FALTANTE")
        }
    }
    
    private static func verifyAuthDependencies() {
        print("üîê [DependencyDebug] Verificando dependencias de autenticaci√≥n...")
        
        // Verificar AuthServiceProtocol
        if DependencyInjector.shared.resolveOptional(AuthServiceProtocol.self) != nil {
            print("‚úÖ AuthServiceProtocol - OK")
        } else {
            print("‚ùå AuthServiceProtocol - FALTANTE")
        }
        
        // Verificar AuthStateManager
        if DependencyInjector.shared.resolveOptional(AuthStateManager.self) != nil {
            print("‚úÖ AuthStateManager - OK")
        } else {
            print("‚ùå AuthStateManager - FALTANTE")
        }
        
        // Verificar ValidationServiceProtocol
        if DependencyInjector.shared.resolveOptional(ValidationServiceProtocol.self) != nil {
            print("‚úÖ ValidationServiceProtocol - OK")
        } else {
            print("‚ùå ValidationServiceProtocol - FALTANTE")
        }
    }
    
    private static func verifyViewModelDependencies() {
        print("üì± [DependencyDebug] Verificando dependencias de ViewModels...")
        
        // Verificar AuthViewModel
        if DependencyInjector.shared.resolveOptional(AuthViewModel.self) != nil {
            print("‚úÖ LoginViewModel - OK")
        } else {
            print("‚ùå LoginViewModel - FALTANTE")
        }

    }
    
    private static func verifyNetworkArchitecture() {
        print("üåê [DependencyDebug] Verificando arquitectura de red...")
        
        // Verificar que solo existe NetworkDispatcherProtocol (sin legacy)
        let networkDispatcher = DependencyInjector.shared.resolveOptional(NetworkDispatcherProtocol.self)
        
        if networkDispatcher != nil {
            print("‚úÖ Arquitectura de red unificada - OK")
            print("  üì° NetworkDispatcher como interface principal")
            print("  üö´ Sin dependencias legacy (APIServiceProtocol)")
        } else {
            print("‚ùå Arquitectura de red - PROBLEMA")
        }
        
        // Verificar componentes de red
        if DependencyInjector.shared.resolveOptional(URLSessionProviderProtocol.self) != nil {
            print("‚úÖ URLSessionProvider - OK")
        } else {
            print("‚ùå URLSessionProvider - FALTANTE")
        }
    }
    
    // MARK: - Architecture Analysis
    
    static func analyzeArchitecture() {
        print("üèóÔ∏è [DependencyDebug] An√°lisis de arquitectura...")
        
        print("üìã Capas de la aplicaci√≥n:")
        print("  üéØ Presentation Layer: Views + ViewModels")
        print("  üîÑ Business Layer: Services + Managers")
        print("  üåê Network Layer: NetworkDispatcher + URLSessionProvider")
        print("  üíæ Storage Layer: SecureStorage + UserDefaults")
        print("  üîó DI Layer: Swinject Container")
        
        print("üîÑ Flujo de datos:")
        print("  View -> ViewModel -> Service -> NetworkDispatcher -> URLSession")
        print("  URLSession -> NetworkDispatcher -> Service -> ViewModel -> View")
        
        print("üéØ Patrones implementados:")
        print("  ‚úÖ MVVM Architecture")
        print("  ‚úÖ Dependency Injection")
        print("  ‚úÖ Protocol-Oriented Programming")
        print("  ‚úÖ Async/Await Concurrency")
        print("  ‚úÖ Result Type Error Handling")
        print("  ‚úÖ Single Responsibility Principle")
    }
}
#endif
